# $${\color{blue}\textbf {Linux File Permissions}}$$

- Permissions determine who can access files  
- And specify who can read, write, modify files/directories on a system

  Note : Use following commands to check File/Dir permissions
  
  ````
  ls -l
  ```` 
  ````
  ll
  ````
- to check particular Dir  permission 
  ````
  ll -d dirname
  ````
- to check particular file permission  
  ````
  ll filename
  ````    
  ````
  ls -ltr
  ````

![image](https://github.com/user-attachments/assets/ffaaaf2e-e67c-4bf5-b518-a79eff53701b)
                                |



## **File Types in Linux**


| **Symbol** | **File Type**          | **Description**                                     |
|------------|------------------------|-----------------------------------------------------|
| `-`        | Normal file            | Text files, binary files, etc.                     |
| `d`        | Directory              | Represents a folder containing other files/folders. |
| `l`        | Link file              | Symbolic link pointing to another file or folder.  |
| `b`        | Block device file      | Used for block storage devices like hard disks.    |
| `c`        | Character device file  | Handles data character by character, e.g., keyboard.|
| `P`        | Pipe                   | Used for inter-process communication.   

---

## $${\color{blue}\textbf {Ownership in Linux}}$$

In Linux, file ownership is divided into three categories:
1. **Owner:** The user who created the file.
2. **Group:** The primary group of the file owner.
3. **Other:** All other users on the system.

---

### **Permission Breakdown**
| **Permission** | **Symbol** | **Value** | **Description**         |
|-----------------|------------|-----------|-------------------------|
| Read            | r          | 4         | Open, view, or list the file/directory. |
| Write           | w          | 2         | Edit or modify the file. |
| Execute         | x          | 1         | Run the file as a program. |

---

### **Example: Change Ownership**

#### **Scenario**
The directory `demo` is owned by user `root`. To change ownership to user `abhi`, use the following commands:

1. **Change Owner**
   ```bash
   syntax: chown username filename
   
   chown abhi demofile.txt
   ```
2. **Change Group Owner** 

   ```
   syntax: chgrp groupname filename
   
   chgrp dev demofile.txt
   ````
3. **Change Owner and Group Simultaneously** 
   ```
   chown user:Grp demofile.txt
   ```


#### $${\color{orange}\textbf{Root User:}}$$
1. **File Permissions:** `644` → `rw- r-- r--`
2. **Directory Permissions:** `755` → `rwx r-x r-x`


#### $${\color{orange}\textbf{Local User: }}$$
1. **File Permissions:** `664` → `rw- rw- r--` 
2. **Directory Permissions:** `775` → `rwx rwx r-x` 

---
## **Root User**

### File Permissions: $${\color{orange}\textbf{644}}$$ ($${\color{green}\textbf{rw- r-- r--}}$$)
#### Symbolic Mode:
```bash
chmod u=rw,g=r,o=r demo.txt
```
#### Numeric Mode:
```bash
chmod 644 demo.txt
```

### Directory Permissions: $${\color{orange}\textbf{755}}$$ ($${\color{green}\textbf{rwx r-x r-x}}$$)
#### Symbolic Mode:
```bash
chmod u=rwx,g=rx,o=rx <directory>
```
#### Numeric Mode:
```bash
chmod 755 <directory>
```

---

## **Local User**

### File Permissions: $${\color{orange}\textbf{664}}$$ ($${\color{green}\textbf{rw- rw- r--}}$$)
#### Symbolic Mode:
```bash
chmod u=rw,g=rw,o=r demo.txt
```
#### Numeric Mode:
```bash
chmod 664 demo.txt
```

### Directory Permissions: $${\color{orange}\textbf{775}}$$ ($${\color{green}\textbf{rwx rwx r-x}}$$)
#### Symbolic Mode:
```bash
chmod u=rwx,g=rwx,o=rx <directory>
```
#### Numeric Mode:
```bash
chmod 775 <directory>